name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '45 8 * * 5'
    
env:
  AWS_REGION: ap-southeast-2
  IMAGE_TAG: latest
  CUR_UBUNTU_VER: 22.04

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    

#     - name: Check out code
#       uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}


#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1
      
      
    - name: Check if there is a push or if Ubuntu version changes
      run: |
        current_version=$(lsb_release -r -s)
        echo "$GITHUB_EVENT_NAME"
        if [ "$GITHUB_EVENT_NAME" == "push" ];  then
          echo "A new push triggered"
          echo "BUILD = true" >> $GITHUB_ENV
        elif [ $current_version != ${{ env.CUR_UBUNTU_VER }} ]; then
          echo "A new Ubuntu version is detected, new version is $current_version"
          echo "BUILD = true" >> $GITHUB_ENV
        else
          echo "No new push or new ubuntu version detected "
          echo "Current ubuntu version is still $current_version"
          echo "BUILD = false" >> $GITHUB_ENV
        fi
        cat $GITHUB_ENV
 #       cat $env
        
        
    - name: Build, tag, and push image to Amazon ECR
      if: env.BUILD
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker-typosquatting
        IMAGE_TAG: latest
      run: |
        echo $GITHUB_ENV.BUILD
        echo "New version or new push detected"
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
